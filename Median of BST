
//User function Template for Java

class Tree
{
     List<Integer> arr;
    public  float findMedian(Node root)
    {
        // code here.
        arr=new ArrayList<>();
        int n=arr.size();
        inorder(root);
        
        if(arr.size()%2==0){
            int mid1 = arr.get(arr.size()/2);
            int mid2=arr.get(arr.size()/2-1);
            return (float)(mid1+mid2)/2;
        }
        return (float)arr.get(arr.size()/2);

    }
    public   void inorder(Node root){
        if(root==null) return;
        
        inorder(root.left);
        arr.add(root.data);
        inorder(root.right);
    }
}
/*
Median of BST
EasyAccuracy: 27.43%Submissions: 80K+Points: 2
This Problem will always be here, but this offer won't be back! Save 25% Now

Given a Binary Search Tree of size N, find the Median of its Node values.

Example 1:

Input:
       6
     /   \
   3      8   
 /  \    /  \
1    4  7    9
Output: 6
Explanation: Inorder of Given BST will be:
1, 3, 4, 6, 7, 8, 9. So, here median will 6.


Example 2:

Input:
       6
     /   \
   3      8   
 /   \    /   
1    4   7   
Output: 5
Explanation:Inorder of Given BST will be:
1, 3, 4, 6, 7, 8. So, here median will
(4 + 6)/2 = 10/2 = 5.

 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findMedian() which takes the root of the Binary Search Tree as input and returns the Median of Node values in the given BST.
Median of the BST is:

    If number of nodes are even: then median = (N/2 th node + (N/2)+1 th node)/2
    If number of nodes are odd : then median = (N+1)/2th node.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Height of the Tree).


Constraints:
*/
